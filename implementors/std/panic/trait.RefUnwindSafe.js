(function() {var implementors = {};
implementors["tower"] = [{"text":"impl !RefUnwindSafe for Discover","synthetic":true,"types":[]},{"text":"impl&lt;D, Req&gt; RefUnwindSafe for MakeBalanceLayer&lt;D, Req&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Req&gt; RefUnwindSafe for MakeBalance&lt;S, Req&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, Req&gt; RefUnwindSafe for MakeFuture&lt;F, Req&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, Req&gt; !RefUnwindSafe for Balance&lt;D, Req&gt;","synthetic":true,"types":[]},{"text":"impl&lt;MS, Target, Request&gt; !RefUnwindSafe for PoolDiscoverer&lt;MS, Target, Request&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;MS, Target, Request&gt; !RefUnwindSafe for Pool&lt;MS, Target, Request&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServiceError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Closed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ResponseFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Request&gt; RefUnwindSafe for BufferLayer&lt;Request&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Request&gt; !RefUnwindSafe for Buffer&lt;T, Request&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ServiceList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as IntoIterator&gt;::IntoIter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Change&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, S, Request&gt; RefUnwindSafe for AsyncResponseFuture&lt;P, S, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as AsyncPredicate&lt;Request&gt;&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Service&lt;&lt;P as AsyncPredicate&lt;Request&gt;&gt;::Request&gt;&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, F&gt; !RefUnwindSafe for ResponseFuture&lt;R, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; RefUnwindSafe for FilterLayer&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; RefUnwindSafe for AsyncFilterLayer&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Filter&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for AsyncFilter&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; RefUnwindSafe for Hedge&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Request&gt; RefUnwindSafe for Future&lt;S, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Service&lt;Request&gt;&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ResponseFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConcurrencyLimitLayer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ConcurrencyLimit&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RateLimitLayer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rate","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RateLimit&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompleteOnResponse","synthetic":true,"types":[]},{"text":"impl&lt;F, C, H&gt; RefUnwindSafe for TrackCompletionFuture&lt;F, C, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, M&gt; RefUnwindSafe for Constant&lt;T, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; RefUnwindSafe for PeakEwma&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, C&gt; RefUnwindSafe for PeakEwmaDiscover&lt;D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cost","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; RefUnwindSafe for PendingRequests&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, C&gt; RefUnwindSafe for PendingRequestsDiscover&lt;D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Count","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Overloaded","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ResponseFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoadShedLayer","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for LoadShed&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M, Request&gt; RefUnwindSafe for IntoService&lt;M, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Request: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, M, Request&gt; RefUnwindSafe for AsService&lt;'a, M, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Request: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, S, Req&gt; !RefUnwindSafe for ReadyCache&lt;K, S, Req&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !RefUnwindSafe for Failed&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, E&gt; RefUnwindSafe for ResponseFuture&lt;F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M, Target&gt; RefUnwindSafe for Reconnect&lt;M, Target&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Service&lt;Target&gt;&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Service&lt;Target&gt;&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Service&lt;Target&gt;&gt;::Response: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Budget","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Overdrawn","synthetic":true,"types":[]},{"text":"impl&lt;P, S, Request&gt; RefUnwindSafe for ResponseFuture&lt;P, S, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Request: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Policy&lt;Request, &lt;S as Service&lt;Request&gt;&gt;::Response, &lt;S as Service&lt;Request&gt;&gt;::Error&gt;&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Service&lt;Request&gt;&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for RetryLayer&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, S&gt; RefUnwindSafe for Retry&lt;P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Request&gt; !RefUnwindSafe for BackgroundReady&lt;T, Request&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, E&gt; RefUnwindSafe for ResponseFuture&lt;F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpawnReadyLayer","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for MakeSpawnReady&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for MakeFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SpawnReady&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Req&gt; RefUnwindSafe for Steer&lt;S, F, Req&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Elapsed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ResponseFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeoutLayer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for AndThen&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2, N&gt; RefUnwindSafe for AndThenFuture&lt;F1, F2, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for AndThenLayer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, E&gt; !RefUnwindSafe for BoxService&lt;T, U, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U, E&gt; !RefUnwindSafe for UnsyncBoxService&lt;T, U, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Svc, S&gt; !RefUnwindSafe for CallAll&lt;Svc, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Svc, S&gt; !RefUnwindSafe for CallAllUnordered&lt;Svc, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, S&gt; RefUnwindSafe for FutureService&lt;F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for MapErrLayer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, N&gt; RefUnwindSafe for MapErrFuture&lt;F, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for MapRequest&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for MapRequestLayer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for MapResponse&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for MapResponseLayer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, N&gt; RefUnwindSafe for MapResponseFuture&lt;F, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for MapResult&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for MapResultLayer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, N&gt; RefUnwindSafe for MapResultFuture&lt;F, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Req&gt; RefUnwindSafe for Oneshot&lt;S, Req&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Service&lt;Req&gt;&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for None","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ResponseFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Optional&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Request&gt; RefUnwindSafe for ReadyOneshot&lt;T, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, Request&gt; RefUnwindSafe for ReadyAnd&lt;'a, T, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ServiceFn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Then&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ThenLayer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2, N&gt; RefUnwindSafe for ThenFuture&lt;F1, F2, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; RefUnwindSafe for ServiceBuilder&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tower_layer"] = [{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for LayerFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Inner, Outer&gt; RefUnwindSafe for Stack&lt;Inner, Outer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Inner: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Outer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tower_test"] = [{"text":"impl RefUnwindSafe for Closed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ResponseFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Mock&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; !RefUnwindSafe for Handle&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SendResponse&lt;T&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()